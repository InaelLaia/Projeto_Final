USE LOJA_CELULAR;

/* View que retorna movimentação geral do estoque em ordem decrescente*/

CREATE VIEW MOVIMENTACAOGERALVIEW AS
SELECT MOVIMENTACAO.ID, PRODUTO.NOME AS PRODUTO, DEPOSITO.NOME AS DEPOSITO, PRODUTO.PRECO, MOVIMENTACAO.QUANTIDADE,
CASE
WHEN MOVIMENTACAO.TIPO = 1 THEN 'ENTRADA'
WHEN MOVIMENTACAO.TIPO = 0 THEN 'SAIDA'
ELSE 'MOVIMENTACAO NÃO RECONHECIDA'
END AS TIPO 
FROM MOVIMENTACAO MOVIMENTACAO
JOIN PRODUTO PRODUTO ON MOVIMENTACAO.PRODUTOID = PRODUTO.ID
JOIN DEPOSITO DEPOSITO ON MOVIMENTACAO.DEPOSITOID = DEPOSITO.ID
ORDER BY MOVIMENTACAO.ID DESC, PRODUTO.NOME, DEPOSITO.NOME;

/* View que mostra os depósito com todos os seus produtos cadastrados*/

CREATE VIEW DEPOSITOPRODUTOSVIEW AS
SELECT PRODUTO.NOME AS NOMEPRODUTO, DEPOSITO.NOME AS NOMEDEPOSITO, DP.PONTOREPOSICAO, DP.QUANTIDADEATUAL
FROM DEPOSITOPRODUTO DP
JOIN DEPOSITO DEPOSITO ON DP.DEPOSITOID = DEPOSITO.ID
JOIN PRODUTO PRODUTO ON DP.PRODUTOID = PRODUTO.ID
ORDER BY DEPOSITO.NOME;

/* View que mostra os fornecedores com todos os seus produtos cadastrados*/

CREATE VIEW FORNECEDORPRODUTOSVIEW AS
SELECT FORNECEDOR.NOME AS NOMEFORNECEDOR, PRODUTO.NOME AS NOMEPRODUTO, PRODUTO.MARCA AS MARCAPRODUTO, PRODUTO.PRECO AS PRECOPRODUTO
FROM FORNECEDORPRODUTO FP
JOIN FORNECEDOR FORNECEDOR ON FP.FORNECEDORID = FORNECEDOR.ID
JOIN PRODUTO PRODUTO ON FP.PRODUTOID = PRODUTO.ID
ORDER BY FORNECEDOR.NOME;

/* Procedure que recebe o ID do deposito e retorna a quantidade atual de cada produto que ele possui e o ponto de reposição*/

DELIMITER //

CREATE PROCEDURE QTD_ATUAL_DEPOSITO (IN ID_ESCOLHIDO INT)
BEGIN 
	SELECT DEPOSITO.NOME, PRODUTO.NOME, DP.QUANTIDADEATUAL, DP.PONTOREPOSICAO
	FROM DEPOSITOPRODUTO DP
	JOIN PRODUTO PRODUTO ON DP.PRODUTOID = PRODUTO.ID
	JOIN DEPOSITO DEPOSITO ON DP.DEPOSITOID = DEPOSITO.ID
	WHERE DP.DEPOSITOID = ID_ESCOLHIDO
	GROUP BY  DEPOSITO.NOME, PRODUTO.NOME, DP.QUANTIDADEATUAL, DP.PONTOREPOSICAO
	ORDER BY  DEPOSITO.NOME;
END //

DELIMITER ;

/* Trigger para atualizar o valor da quantidade atual de um produto sempre que houver uma nova inserção na tabela MOVIMENTACAO */

DELIMITER //

CREATE TRIGGER ATUALIZAR_QTD
AFTER INSERT ON MOVIMENTACAO
FOR EACH ROW
BEGIN
    IF NEW.TIPO = 1 THEN
        UPDATE DEPOSITOPRODUTO
        SET QUANTIDADEATUAL = (QUANTIDADEATUAL + NEW.QUANTIDADE)
        WHERE DEPOSITOID = NEW.DEPOSITOID
        AND PRODUTOID = NEW.PRODUTOID;
    ELSE
        UPDATE DEPOSITOPRODUTO
        SET QUANTIDADEATUAL = (QUANTIDADEATUAL - NEW.QUANTIDADE)
        WHERE DEPOSITOID = NEW.DEPOSITOID
        AND PRODUTOID = NEW.PRODUTOID;
    END IF;
END //

DELIMITER ;

/* View que retorna o nome e a quantidade atual total dos produtos que estão abaixo do ponto de reposição geral cadastrado no sistema */

CREATE VIEW REPOSICAO AS
SELECT DEPOSITO.NOME AS DEPOSITO, PRODUTO.NOME AS PRODUTO, DP.QUANTIDADEATUAL, DP.PONTOREPOSICAO
FROM DEPOSITOPRODUTO DP
JOIN PRODUTO PRODUTO ON DP.PRODUTOID = PRODUTO.ID
JOIN DEPOSITO DEPOSITO ON DP.DEPOSITOID = DEPOSITO.ID
WHERE DP.QUANTIDADEATUAL < DP.PONTOREPOSICAO
ORDER BY DEPOSITO.NOME;

/* Adicionando índices as colunas mais utilizadas nas consultas para tentar melhorar o desempenho das consultas */

CREATE INDEX IDX_NOME_DEPOSITO ON DEPOSITO(NOME);
CREATE INDEX IDX_NOME_PRODUTO ON PRODUTO(NOME);
CREATE INDEX IDX_QTD_MOVIMENTACAO ON MOVIMENTACAO(QUANTIDADE);
CREATE INDEX IDX_QTD_ATUAL ON DEPOSITOPRODUTO(QUANTIDADEATUAL);